//--- deploy full aar (including javadoc and source) on Repository (maven way) ---
apply plugin: 'maven'

repositories {
    maven { url "https://raw.github.com/synergian/wagon-git/releases" }
}

configurations {
    deployLibrary
}

dependencies {
    deployLibrary 'ar.com.synergian:wagon-git:0.2.5'
}


//--- fill values in gradle.properties file ---
def groupId = project.PUBLISH_GROUP_ID
def artifactId = project.PUBLISH_ARTIFACT_ID
def version = project.PUBLISH_VERSION

def releaseDest = project.PUBLISH_RELEASE_DEST
def localReleaseDest = new File(System.getProperty('user.home'),'.m2/repository').absolutePath

//--- used to avoid to erase already versioned library vith same version number ---
task lookForArtifacts {
    doLast {
        def artifactName = artifactId + '-' + version + '.aar'
        def artifactPath = groupId.replace(".", "/") + "/" + artifactId + "/" + version + "/" + artifactName
        def repositoryUrl = REPOSITORY_RAW_URL + "/" + artifactPath
        //def repositoryUrl = 'https://api.bitbucket.org/1.0/repositories/' + COMPANY + '/' + REPOSITORY_NAME + '/raw/releases/' + artifactPathm

        println("")
        println("Checking if artifact already exists: " + artifactName)
        println("at URL: " + repositoryUrl)

        def artifactExists = urlExists(repositoryUrl)
        println(artifactExists ? "existing artifact found" : "no existing artifact found")
        println("")

        if (urlExists(repositoryUrl)) {
            throw new RuntimeException("Artifact with version " + version + " already exist - not executing uploadArchives")
        }
        return true
    }
}

def urlExists(String repositoryUrl) {
    try {
        def connection = (HttpURLConnection) new URL(repositoryUrl).openConnection()

        connection.setRequestProperty("Authorization", "Basic " + getBase64EncodedCredentials())
        connection.setConnectTimeout(10000)
        connection.setReadTimeout(10000)
        connection.setRequestMethod("HEAD")

        def responseCode = connection.getResponseCode()
        println("responseCode: " + responseCode)

        return (200 == responseCode)
    } catch (IOException ignored) {
        return false
    }
}

def getBase64EncodedCredentials() {
    def s = REPOSITORY_USERNAME + ":" + REPOSITORY_PASSWORD;
    return s.bytes.encodeBase64().toString()
}
//-----------------------------------------------------------------

tasks.addRule("LocalRelease") {
    if (releaseDest.startsWith("file")) {
        localReleaseDest = "${buildDir}/release/${version}"   //useful only for task "generateRelease" (locally)
    } else {
        //--- the Upload will fail if the artifact-version already exist in the remote Repository ---
        uploadArchives.dependsOn(lookForArtifacts)
    }
}

//--- Deploy aar on the repository ----
uploadArchives {
    repositories.mavenDeployer {
        //configuration = rootProject.configurations.deployLibrary
        configuration = configurations.deployLibrary
        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version
        uniqueVersion = false
        repository(url: "${releaseDest}")
       // repository(url: "git:releases://git@bitbucket.org:myLogin/MyRepository.git")
/*        repository(url: "git:releases:https://myLogin@bitbucket.org/myLogin/MyRepository.git") {
            authentication(userName: 'myLogin', password: 'myPass')
        }*/
       // snapshotRepository(url: 'file://' + new File(System.getProperty('user.home'),'.m2/repository').absolutePath) { }
        snapshotRepository(url: 'file://' + "${localReleaseDest}") { }
    }
}

//task install(dependsOn: uploadArchives)

//--- Deploy source and Javadoc ---
task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError = false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}


//----------------------------------  Local Release -----------------------------------------------------
task checkReleaseLocalCondition  << {
    println "checkReleaseLocalCondition - localReleaseDest = ${localReleaseDest}"
    if (localReleaseDest.contains(".m2")) {
        throw new RuntimeException("Change the PUBLISH_RELEASE_DEST property  to publish locally (ex : 'file:///C:\\\\Temp\\\\myGradleRepo'")
    }
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "release-${artifactId}-${version}.zip"
}

task generateRelease << {
    println "Release ${version} can be found at ${localReleaseDest}/"
    println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
}

zipRelease.dependsOn(checkReleaseLocalCondition)
zipRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)


